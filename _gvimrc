"==============================================================================
" 独自設定開始
"==============================================================================
set nobackup
set nu
set ts=4 sw=4 tw=0 expandtab
set nowrap

" 改行時のコメントを無効にする
autocmd FileType * setlocal formatoptions-=ro

"*******************************************************
" vim-hybrid の適用
"*******************************************************
let g:hybrid_use_Xresources = 1

"*******************************************************
" カラー設定:
"*******************************************************
colorscheme hybrid

"*******************************************************
" フォント設定:
"*******************************************************
if has('win32')
  " Windows用
  "set guifont=MS_Gothic:h12:cSHIFTJIS
  set guifont=Migu\ 1M:h12
  " 行間隔の設定
  set linespace=1
  " 一部のUCS文字の幅を自動計測して決める
  if has('kaoriya')
    set ambiwidth=auto
  endif
elseif has('mac')
  set guifont=Osaka－等幅:h14
elseif has('xfontset')
  " UNIX用 (xfontsetを使用)
  set guifontset=a14,r14,k14
endif

"*******************************************************
" ウインドウに関する設定:
"*******************************************************
" ウインドウの幅
set columns=200
" ウインドウの高さ
set lines=70
" コマンドラインの高さ(GUI使用時)
set cmdheight=2
" 画面を黒地に白にする (次行の先頭の " を削除すれば有効になる)
"colorscheme evening " (GUI使用時)

"*******************************************************
" C/C++ mode
"*******************************************************
"タブ幅をリセット
au BufNewFile,BufRead * set tabstop=4 shiftwidth=4
" .rhtmlと.rbと.yml.coffeeでタブ幅を変更
au BufNewFile,BufRead *.h set tabstop=4 shiftwidth=4 noexpandtab
au BufNewFile,BufRead *.c set tabstop=4 shiftwidth=4 noexpandtab
au BufNewFile,BufRead *.cpp set tabstop=4 shiftwidth=4 noexpandtab


"*******************************************************
" Ruby-mode
"*******************************************************
set nocompatible
filetype on
filetype indent on
filetype plugin on
au FileType ruby set ts=2 sw=2 expandtab

"<C-Space>でomni補完
imap <C-Space> <C-x><C-o>

"Rubyのオムニ補完を設定(ft-ruby-omni)
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1

"タブ幅をリセット
au BufNewFile,BufRead * set tabstop=4 shiftwidth=4
" .rhtmlと.rbと.yml.coffeeでタブ幅を変更
au BufNewFile,BufRead *.rhtml set tabstop=2 shiftwidth=2
au BufNewFile,BufRead *.rb set tabstop=2 shiftwidth=2
au BufNewFile,BufRead *.erb set tabstop=2 shiftwidth=2
au BufNewFile,BufRead *.css set tabstop=2 shiftwidth=2
au BufNewFile,BufRead *.scss set tabstop=2 shiftwidth=2
au BufNewFile,BufRead *.sass set tabstop=2 shiftwidth=2
au BufNewFile,BufRead *.haml set tabstop=2 shiftwidth=2
au BufNewFile,BufRead *.slim set tabstop=2 shiftwidth=2
au BufNewFile,BufRead *.yml set tabstop=2 shiftwidth=2
au BufNewFile,BufRead *.coffee set tabstop=2 shiftwidth=2
au BufNewFile,BufRead Gemfile set tabstop=2 shiftwidth=2
"Rails関連ファイルで文字コードをUFT-8に設定
au User Rails* set fenc=utf-8

"*******************************************************
" netrwの設定
"*******************************************************
" netrwは常にtree view
let g:netrw_liststyle = 3
" CVSと.で始まるファイルは表示しない
let g:netrw_list_hide = 'CVS,\(^\|\s\s\)\zs\.\S\+'
" 'v'でファイルを開くときは右側に開く。(デフォルトが左側なので入れ替え)
let g:netrw_altv = 1
" 'o'でファイルを開くときは下側に開く。(デフォルトが上側なので入れ替え)
let g:netrw_alto = 1

"*******************************************************
" NERDTree の設定
"*******************************************************
" 引数なしで実行したとき、NERDTreeを実行する
let file_name = expand("%:p")
if has('vim_starting') &&  file_name == ""
    autocmd VimEnter * call ExecuteNERDTree()
endif
 
" カーソルが外れているときは自動的にnerdtreeを隠す
function! ExecuteNERDTree()
    "b:nerdstatus = 1 : NERDTree 表示中
    "b:nerdstatus = 2 : NERDTree 非表示中

    if !exists('g:nerdstatus')
        execute 'NERDTree ~/'
        let g:windowWidth = winwidth(winnr())
        let g:nerdtreebuf = bufnr('')
        let g:nerdstatus = 1 
 
    elseif g:nerdstatus == 1 
        execute 'wincmd t'
        execute 'vertical resize' 0 
        execute 'wincmd p'
        let g:nerdstatus = 2 
    elseif g:nerdstatus == 2 
        execute 'wincmd t'
        execute 'vertical resize' g:windowWidth
        let g:nerdstatus = 1 
 
    endif
endfunction
noremap <c-e> :<c-u>:call ExecuteNERDTree()<cr>

"*******************************************************
" asp/inc/css/js ファイルの設定
"*******************************************************
"タブ幅をリセット
au BufNewFile,BufRead *.asp set tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
au BufNewFile,BufRead *.inc set tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
au BufNewFile,BufRead *.css set tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
au BufNewFile,BufRead *.js set tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab

"*******************************************************
"  括弧の自動補完
"*******************************************************
inoremap ( ()<ESC>i
inoremap <expr> ) ClosePair(')')
inoremap { {}<ESC>i
inoremap <expr> } ClosePair('}')
inoremap [ []<ESC>i
inoremap <expr> ] ClosePair(']')
" pair close checker.
" from othree vimrc ( http://github.com/othree/rc/blob/master/osx/.vimrc )
function ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endf

"*******************************************************
" minibufexpl.vim : タブエディタ風にバッファ管理ウィンドウを表示
"*******************************************************
:let g:miniBufExplMapWindowNavVim = 1
:let g:miniBufExplMapWindowNavArrows = 1
:let g:miniBufExplMapCTabSwitchBuffs = 1

"*******************************************************
" ファイル保存時にディレクトリが無ければ自動作成する
"*******************************************************
augroup vimrc-auto-mkdir  " {{{
  autocmd!
  autocmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'))
  function! s:auto_mkdir(dir)  " {{{
    if !isdirectory(a:dir)
      call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
    endif
  endfunction  " }}}
augroup END  " }}}

"*******************************************************
" 現在行をハイライトする
"*******************************************************
set cursorline

"*******************************************************
" 縦方向にもハイライト
"*******************************************************
"set cursorcolumn

"*******************************************************
" キーマップ設定
"*******************************************************
" バッファ一覧
nmap <c-b> :BufExplorer<CR> 
 " FufFileのキーバインド
nmap <c-f> :FufFile<CR>
" 新規バッファ生成
nmap <c-n> :enew<CR>
" grepのキーバインド
nmap <c-g> :vimgrep /\<<C-R><C-W>\>/ **/*.* | cw
" vim.railsのキーバインド(Rails開発専用)
nmap <c-m> :R<CR>
" Bcloseのキーバインド
nmap <c-d> :Bclose<CR>
" 保存のキーバインドを設定
nmap <c-s> :w<CR>
" バッファ移動（次へ）
nmap <c-l> :bn<CR>
" バッファ移動（前へ）
nmap <c-h> :bp<CR>


"*******************************************************
" 関数一覧を表示させるための設定
"*******************************************************
set tags=tags

"*******************************************************
 " バッファが変更されているとき、コマンドをエラーにするのでなく、保存する
 " かどうか確認を求める
"*******************************************************
 set confirm
 
"*******************************************************
 " Always display the status line, even if only one window is displayed
 " ステータスラインを常に表示する
"*******************************************************
 set laststatus=2

"*******************************************************
 " Display the cursor position on the last line of the screen or in the status
 " line of a window
 " 画面最下行にルーラーを表示する
"*******************************************************
 set ruler
 
"*******************************************************
  " バッファを保存しなくても他のバッファを表示できるようにする
"*******************************************************
 set hidden
 
"*******************************************************
 " Better command-line completion
 " コマンドライン補完を便利に
"*******************************************************
 set wildmenu
 
"*******************************************************
 " Show partial commands in the last line of the screen
 " タイプ途中のコマンドを画面最下行に表示
"*******************************************************
 set showcmd

" ポップアップメニューのカラーを設定
hi Pmenu guibg=#666666
hi PmenuSel guibg=#8cd0d3 guifg=#666666
hi PmenuSbar guibg=#333333

"*******************************************************
" クリップボード関連の設定
"*******************************************************
" 選択した箇所をクリップボードにコピー
:set guioptions+=a
" ヤンクした箇所をクリップボードにコピー
":set clipboard+=unnamed

"*******************************************************
" vundleを使ってプラグインを管理する
"*******************************************************
set rtp+=~/.vim/bundle/vundle.git/
call vundle#rc()

Bundle 'https://github.com/flazz/vim-colorschemes.git'
Bundle 'https://github.com/groenewege/vim-less.git'
Bundle 'https://github.com/slim-template/vim-slim.git'
Bundle 'https://github.com/w0ng/vim-hybrid.git'
Bundle 'https://github.com/bcaccinolo/bclose.git'
Bundle 'https://github.com/jpo/vim-railscasts-theme.git'
Bundle 'https://github.com/jistr/vim-nerdtree-tabs.git'
Bundle 'https://github.com/corntrace/bufexplorer.git'
Bundle 'https://github.com/kchmck/vim-coffee-script.git'
Bundle 'https://github.com/fholgado/minibufexpl.vim.git'
Bundle 'https://github.com/scrooloose/nerdtree.git'
Bundle 'https://github.com/vim-scripts/ruby-matchit.git'
Bundle 'https://github.com/vim-scripts/FuzzyFinder.git'
Bundle 'https://github.com/vim-scripts/L9.git'
Bundle 'https://github.com/vim-scripts/taglist.vim.git'
Bundle 'https://github.com/tpope/vim-rails.git'
Bundle 'https://github.com/tpope/vim-surround.git'
Bundle 'https://github.com/tpope/vim-endwise.git'
Bundle 'https://github.com/tpope/vim-bundler.git'
Bundle 'https://github.com/Shougo/neocomplcache.git'
Bundle 'https://github.com/Shougo/neosnippet.git'
Bundle 'https://github.com/Shougo/neocomplcache-rsense.git'
Bundle 'https://github.com/gregsexton/Muon.git'
Bundle 'https://github.com/sickill/vim-monokai.git'

"*******************************************************
" タブエディタとしての設定
"*******************************************************
" 0を指定した場合は常に非表示、
" 1なら2つ以上タブページがある場合に表示、
" 2なら常に表示、
"set showtabline=2

"*******************************************************
" neocomplcacheの設定
"*******************************************************
:NeoComplCacheEnable
"日本語を補完候補として取得しないようにする
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<TAB>"
  else
    if pumvisible()
      return "\<C-N>"
    else
      return "\<C-N>\<C-P>"
    end
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>

"*******************************************************
" .less to .css , lessc is required.
"*******************************************************
nnoremap ,m :w <BAR> !lessc % > %:t:r.css<CR><space>

"*******************************************************
" ステータスラインのカスタム
"*******************************************************
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8P


"*******************************************************
" neosnippet
"*******************************************************
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

